@model ResultModel

@{
    Layout = "_Layout";
}

<div>
    @if (Model.ConversionFailed || Model.Unsupported)
    {
        if (@Model.Unsupported)
        {
            <h1>Failed to generate playlist</h1>
            <p>Could not scrape the youtube playlist, check the Id you pasted is complete.<br /> Currently Youtube generated "Mix" playlist are also not supported</p>
        }
        else if (@Model.ConversionFailed)
        {
            <h1>Oof, the app failed to convert a legit youtube playlist</h1>
            <p>Please inform the poor basterd who made this <br />his app isn't working <a href="mailto:sam.b5687@gmail.com">by sending him an email.</a><br /> Be sure to include the playlist id you used below</p>            
        }
        <h2>Original Youtube Playlist: </h2>
        <a href="@Model.YoutubeLink">@Model.YoutubeLink</a>
    }
    else
    {
        <h1>Your Converted Spotify Playlist is Ready!</h1>
        <a href="@Model.SpotifyLink">@Model.SpotifyLink</a>
        <h2>Original Youtube Playlist: </h2>
        <a href="@Model.YoutubeLink">@Model.YoutubeLink</a>
    }
</div>


@if (!Model.ConversionFailed && !Model.Unsupported)
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Youtube Videos Total: (@Model.YoutubeVideoNames.Count)</th>
                <th scope="col">Spotify Tracks Total: Found: (@Model.SpotifyTrackNames.Where(x => !string.IsNullOrEmpty(x)).Count());</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.YoutubeVideoNames.Count; i++)
            {
                int j = i + 1;
                <tr>
                    <th scope="row">@j</th>
                    <td>@Model.YoutubeVideoNames[i]</td>
                    <td>@Model.SpotifyTrackNames[i]</td>

                </tr>
            }
        </tbody>
    </table>
}






